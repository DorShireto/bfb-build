#!/bin/bash -e
###############################################################################
#
# Copyright 2022 NVIDIA Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###############################################################################

cd ${0%*/*}

if [ ! -e Dockerfile ]; then
	echo "ERROR: Dockerfile is missing."
	exit 1
fi

if ! (which wget > /dev/null 2>&1); then
	echo "wget is required to build BFB"
	exit 1
fi

if ! (which docker > /dev/null 2>&1); then
	echo "docker is required to build BFB"
	exit 1
fi

DISTRO="ubuntu"
DISTRO_VERSION="22.04"
DISTRO_BASE_URL="https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-arm64-root.tar.xz"
ARCH=${ARCH:-"arm64-dpu"}
DOCA_VERSION="2.8.0"
BSP_VERSION="4.8.0-13249"
MLNX_OFED_VERSION="24.07-0.6.0.0"
BF2_BMC_VERSION="24.07-14"
BF3_BMC_VERSION="24.07-14"
BF2_CEC_VERSION="04.0f"
BF3_CEC_VERSION="00.02.0182.0000"
BF3_NIC_FW_VERSION="32_42_1000"
IMAGE_TYPE=${IMAGE_TYPE:-"prod"}
CUSTOM_VERSION=${CUSTOM_VERSION:-""}
INCLUDE_BF2BMC=${INCLUDE_BF2BMC:-"yes"}
INCLUDE_BF3BMC=${INCLUDE_BF3BMC:-"yes"}
INCLUDE_DOCA_SERVICES=${INCLUDE_DOCA_SERVICES:-"yes"}
BASE_URL=${BASE_URL:-"https://linux.mellanox.com/public/repo"}
LEAVE_CONTAINER=${LEAVE_CONTAINER:-"no"}

WDIR=/tmp/${DISTRO}${DISTRO_VERSION}${DISTRO_KERNEL}.$$
echo "Downloading mlxbf-bootimages..."
case "$IMAGE_TYPE" in
	prod)
		bootimages="mlxbf-bootimages-signed_${BSP_VERSION}_arm64.deb"
		;;
	dev)
		bootimages="mlxbf-bootimages-devsigned_${BSP_VERSION}_arm64.deb"
		;;
	unsigned)
		bootimages="mlxbf-bootimages_${BSP_VERSION}_arm64.deb"
		;;
esac

wget -q -P $WDIR ${BASE_URL}/doca/${DOCA_VERSION}/${DISTRO}${DISTRO_VERSION}${DISTRO_KERNEL}/${ARCH}/$bootimages
mv $WDIR/mlxbf-bootimages*arm64.deb $WDIR/mlxbf-bootimages.deb

cp -a \
	Dockerfile \
	build_ubuntu_bfb \
	create_bfb \
	install.sh \
	repos \
	10-mlx-console-messages.conf \
	apt-preferences \
	../../common/tools/qemu-aarch64-static \
	$WDIR

echo "deb [trusted=yes] ${BASE_URL}/doca/${DOCA_VERSION}/${DISTRO}${DISTRO_VERSION}/arm64-dpu/ /" | tee $WDIR/repos/doca.base.list

if [ -d install.env ]; then
	cp -a install.env \
		$WDIR
else
	cp -a ../../common/install.env \
		$WDIR
fi

cd $WDIR

mkdir -p BF2BMC/pk/{bmc,cec} BF2BMC/qp
mkdir -p BF3BMC/pk/{bmc,cec,golden_images/dpu,golden_images/fw} BF3BMC/{dk,qp}
if [ "$IMAGE_TYPE" == "prod" ]; then
	if [ "${INCLUDE_BF2BMC}" == "yes" ]; then
		echo "Downloading BlueField-2 BMC software..."
		wget -q -P $WDIR/BF2BMC/pk/bmc -r --no-verbose --no-directories -l1 --no-parent -A 'bf2-bmc*tar' ${BASE_URL}/bluefield/BMC/BF2/bmc/${BF2_BMC_VERSION}/
		wget -q -P $WDIR/BF2BMC/pk/cec -r --no-verbose --no-directories -l1 --no-parent -A 'cec*bin' ${BASE_URL}/bluefield/BMC/BF2/cec/${BF2_CEC_VERSION}/
	fi

	if [ "${INCLUDE_BF3BMC}" == "yes" ]; then
		echo "Downloading BlueField-3 BMC software..."
		wget -q -P $WDIR/BF3BMC/pk/bmc -r --no-verbose --no-directories -l1 --no-parent -A 'bf3-bmc*fwpkg' ${BASE_URL}/bluefield/BMC/BF3/bmc/${BF3_BMC_VERSION}/
		wget -q -P $WDIR/BF3BMC/pk/cec -r --no-verbose --no-directories -l1 --no-parent -A 'cec*fwpkg' ${BASE_URL}/bluefield/BMC/BF3/cec/${BF3_CEC_VERSION}/
		wget -q -P $WDIR/BF3BMC/pk/golden_images/dpu -r --no-verbose --no-directories -l1 --no-parent -A 'BlueField*.bfb' ${BASE_URL}/bluefield/BMC/BF3/golden_images/dpu/${BSP_VERSION}/
		wget -q -P $WDIR/BF3BMC/pk/golden_images/fw -r --no-verbose --no-directories -l1 --no-parent -A 'fw*.bfb' ${BASE_URL}/bluefield/BMC/BF3/golden_images/nic-fw/${BF3_NIC_FW_VERSION}/
	fi
fi
if [ "$INCLUDE_DOCA_SERVICES" == "yes" ]; then
	echo "Downloading DOCA services..."
	wget --quiet -r -np -nH --cut-dirs=5 -R "index.html*" ${BASE_URL}/doca/${DOCA_VERSION}/services/
fi
echo "Downloading $DISTRO base image..."
wget -q --no-check-certificate $DISTRO_BASE_URL
docker_image=bfb_runtime_${DISTRO,,}${DISTRO_VERSION,,}

docker rm -f BlueField_OS_${DISTRO}_${DISTRO_VERSION} 2> /dev/null

sed -i -e "s/@IMAGE_TYPE@/$IMAGE_TYPE/g;s/@CUSTOM_VERSION@/$CUSTOM_VERSION/g" Dockerfile

docker build -t ${docker_image} \
	-f Dockerfile .

DOCKER_RUN_PARAMS="--privileged -e container=docker \
	-v $PWD:/workspace \
	--name BlueField_OS_${DISTRO}_${DISTRO_VERSION} \
	--mount type=bind,source=/dev,target=/dev \
	--mount type=bind,source=/sys,target=/sys \
	--mount type=bind,source=/proc,target=/proc"

if [ "X${LEAVE_CONTAINER}" == "Xyes" ]; then
	DOCKER_RUN_PARAMS="-d -it ${DOCKER_RUN_PARAMS}"
	docker_id=$(docker run ${DOCKER_RUN_PARAMS} \
		${docker_image} /bin/bash)
	docker exec -it ${docker_id} /bin/bash -x /root/workspace/build_ubuntu_bfb
else
	DOCKER_RUN_PARAMS="-t --rm ${DOCKER_RUN_PARAMS}"
	docker run ${DOCKER_RUN_PARAMS} \
		${docker_image} /bin/bash -x /root/workspace/build_ubuntu_bfb
fi

readlink -f *.bfb

echo "Default user/password is: ubuntu/ubuntu"

if [ "X${LEAVE_CONTAINER}" == "Xyes" ]; then
	echo "Container name: BlueField_OS_${DISTRO}_${DISTRO_VERSION} id: ${docker_id}"
fi
